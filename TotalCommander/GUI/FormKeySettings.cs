using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Xml.Serialization;
using TotalCommander;

namespace TotalCommander.GUI
{
    public partial class FormKeySettings : Form
    {
        private KeySettings keySettings;
        private Dictionary<Keys, ComboBox> keyComboBoxes = new Dictionary<Keys, ComboBox>();
        private Dictionary<Keys, ComboBox> userExecuteOptionComboBoxes = new Dictionary<Keys, ComboBox>();

        public FormKeySettings()
        {
            InitializeComponent();
            keySettings = KeySettings.Load();
        }

        public FormKeySettings(KeySettings settings)
        {
            InitializeComponent();
            keySettings = settings;
        }

        // Code generated by Designer
        private void InitializeComponent()
        {
            this.lblTitle = new System.Windows.Forms.Label();
            this.btnSave = new System.Windows.Forms.Button();
            this.btnCancel = new System.Windows.Forms.Button();
            this.btnDefault = new System.Windows.Forms.Button();
            this.tblKeySettings = new System.Windows.Forms.TableLayoutPanel();
            this.btnManageUserOptions = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // lblTitle
            // 
            this.lblTitle.AutoSize = true;
            this.lblTitle.Font = new System.Drawing.Font("¸¼Àº °íµñ", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(129)));
            this.lblTitle.Location = new System.Drawing.Point(12, 9);
            this.lblTitle.Name = "lblTitle";
            this.lblTitle.Size = new System.Drawing.Size(102, 21);
            this.lblTitle.TabIndex = 0;
            this.lblTitle.Text = "±â´É Å° ¼³Á¤";
            // 
            // btnSave
            // 
            this.btnSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.btnSave.DialogResult = System.Windows.Forms.DialogResult.OK;
            this.btnSave.Location = new System.Drawing.Point(310, 308);
            this.btnSave.Name = "btnSave";
            this.btnSave.Size = new System.Drawing.Size(80, 25);
            this.btnSave.TabIndex = 2;
            this.btnSave.Text = "&Save";
            this.btnSave.UseVisualStyleBackColor = true;
            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
            // 
            // btnCancel
            // 
            this.btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.btnCancel.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.btnCancel.Location = new System.Drawing.Point(396, 308);
            this.btnCancel.Name = "btnCancel";
            this.btnCancel.Size = new System.Drawing.Size(80, 25);
            this.btnCancel.TabIndex = 3;
            this.btnCancel.Text = "Cancel";
            this.btnCancel.UseVisualStyleBackColor = true;
            // 
            // btnDefault
            // 
            this.btnDefault.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.btnDefault.Location = new System.Drawing.Point(10, 308);
            this.btnDefault.Name = "btnDefault";
            this.btnDefault.Size = new System.Drawing.Size(80, 25);
            this.btnDefault.TabIndex = 4;
            this.btnDefault.Text = "&Default";
            this.btnDefault.UseVisualStyleBackColor = true;
            this.btnDefault.Click += new System.EventHandler(this.btnDefault_Click);
            // 
            // tblKeySettings
            // 
            this.tblKeySettings.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.tblKeySettings.ColumnCount = 3;
            this.tblKeySettings.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 20F));
            this.tblKeySettings.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 40F));
            this.tblKeySettings.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 40F));
            this.tblKeySettings.Location = new System.Drawing.Point(12, 40);
            this.tblKeySettings.Name = "tblKeySettings";
            this.tblKeySettings.RowCount = 8;
            this.tblKeySettings.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.tblKeySettings.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.tblKeySettings.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.tblKeySettings.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.tblKeySettings.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.tblKeySettings.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.tblKeySettings.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.tblKeySettings.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute, 30F));
            this.tblKeySettings.Size = new System.Drawing.Size(461, 241);
            this.tblKeySettings.TabIndex = 5;
            // 
            // btnManageUserOptions
            // 
            this.btnManageUserOptions.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.btnManageUserOptions.Location = new System.Drawing.Point(96, 308);
            this.btnManageUserOptions.Name = "btnManageUserOptions";
            this.btnManageUserOptions.Size = new System.Drawing.Size(80, 25);
            this.btnManageUserOptions.TabIndex = 6;
            this.btnManageUserOptions.Text = "&Manage";
            this.btnManageUserOptions.UseVisualStyleBackColor = true;
            this.btnManageUserOptions.Click += new System.EventHandler(this.btnManageUserOptions_Click);
            // 
            // FormKeySettings
            // 
            this.AcceptButton = this.btnSave;
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 12F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.CancelButton = this.btnCancel;
            this.ClientSize = new System.Drawing.Size(485, 342);
            this.Controls.Add(this.btnManageUserOptions);
            this.Controls.Add(this.tblKeySettings);
            this.Controls.Add(this.btnDefault);
            this.Controls.Add(this.btnCancel);
            this.Controls.Add(this.btnSave);
            this.Controls.Add(this.lblTitle);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "FormKeySettings";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Function Key Settings";
            this.Load += new System.EventHandler(this.FormKeySettings_Load);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        private System.Windows.Forms.Label lblTitle;
        private System.Windows.Forms.Button btnSave;
        private System.Windows.Forms.Button btnCancel;
        private System.Windows.Forms.Button btnDefault;
        private System.Windows.Forms.TableLayoutPanel tblKeySettings;
        private System.Windows.Forms.Button btnManageUserOptions;

        private void FormKeySettings_Load(object sender, EventArgs e)
        {
            // Initialize table layout
            tblKeySettings.Controls.Clear();
            tblKeySettings.RowCount = 8; // Header + F2-F8 keys (7 rows)

            // Add header
            var headerKey = new Label { Text = StringResources.GetString("Key"), Font = new Font(Font, FontStyle.Bold), Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleLeft };
            var headerAction = new Label { Text = StringResources.GetString("Command"), Font = new Font(Font, FontStyle.Bold), Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleLeft };
            var headerUserOption = new Label { Text = "User Execute Option", Font = new Font(Font, FontStyle.Bold), Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleLeft };
            tblKeySettings.Controls.Add(headerKey, 0, 0);
            tblKeySettings.Controls.Add(headerAction, 1, 0);
            tblKeySettings.Controls.Add(headerUserOption, 2, 0);

            // Add F2-F8 key settings UI
            for (int i = 0; i < 7; i++)
            {
                Keys key = Keys.F2 + i;
                int rowIndex = i + 1; // Start after header

                // Key label
                var lblKey = new Label { Text = key.ToString(), Dock = DockStyle.Fill, TextAlign = ContentAlignment.MiddleLeft };
                tblKeySettings.Controls.Add(lblKey, 0, rowIndex);

                // Action combobox
                var cboAction = new ComboBox { Dock = DockStyle.Fill, DropDownStyle = ComboBoxStyle.DropDownList };
                PopulateActionComboBox(cboAction);
                
                // Select current action
                KeyAction currentAction = keySettings.GetActionForKey(key);
                cboAction.SelectedItem = GetActionDisplayText(currentAction);
                cboAction.Tag = key; // To identify which key this combobox is for
                cboAction.SelectedIndexChanged += CboAction_SelectedIndexChanged;

                tblKeySettings.Controls.Add(cboAction, 1, rowIndex);
                keyComboBoxes[key] = cboAction;

                // User execute option combobox (only enabled if UserExecute action is selected)
                var cboUserOption = new ComboBox { Dock = DockStyle.Fill, DropDownStyle = ComboBoxStyle.DropDownList };
                PopulateUserExecuteOptionComboBox(cboUserOption);
                
                // Select current user execute option
                string currentUserOptionName = keySettings.GetUserExecuteOptionNameForKey(key);
                if (!string.IsNullOrEmpty(currentUserOptionName))
                {
                    cboUserOption.SelectedItem = currentUserOptionName;
                }

                // Initially disabled (only enabled if UserExecute action is selected)
                cboUserOption.Enabled = (currentAction == KeyAction.UserExecute);

                tblKeySettings.Controls.Add(cboUserOption, 2, rowIndex);
                userExecuteOptionComboBoxes[key] = cboUserOption;
            }
        }

        private void CboAction_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox cboAction = sender as ComboBox;
            if (cboAction == null || cboAction.Tag == null)
                return;

            Keys key = (Keys)cboAction.Tag;
            
            // Find the user execute option combobox
            if (userExecuteOptionComboBoxes.TryGetValue(key, out ComboBox cboUserOption))
            {
                // Only enable if UserExecute action is selected
                string selectedActionText = cboAction.SelectedItem?.ToString() ?? "";
                KeyAction selectedAction = GetActionFromDisplayText(selectedActionText);
                
                cboUserOption.Enabled = (selectedAction == KeyAction.UserExecute);
                
                // If user execute option is selected but no option is selected in the dropdown, select the first one
                if (selectedAction == KeyAction.UserExecute && 
                    (cboUserOption.SelectedIndex < 0 || cboUserOption.SelectedItem == null) && 
                    cboUserOption.Items.Count > 0)
                {
                    cboUserOption.SelectedIndex = 0;
                }
            }
        }

        private void PopulateActionComboBox(ComboBox comboBox)
        {
            comboBox.Items.Clear();
            
            // Add all values of KeyAction enum to combobox
            foreach (KeyAction action in Enum.GetValues(typeof(KeyAction)))
            {
                comboBox.Items.Add(GetActionDisplayText(action));
            }
        }

        private void PopulateUserExecuteOptionComboBox(ComboBox comboBox)
        {
            comboBox.Items.Clear();
            
            // Add user execute options list
            foreach (var option in keySettings.UserExecuteOptions)
            {
                comboBox.Items.Add(option.Name);
            }
        }

        private string GetActionDisplayText(KeyAction action)
        {
            switch (action)
            {
                case KeyAction.None: return "None";
                case KeyAction.View: return "View File";
                case KeyAction.Edit: return "Edit File";
                case KeyAction.Copy: return "Copy";
                case KeyAction.Cut: return "Cut";
                case KeyAction.Paste: return "Paste";
                case KeyAction.Delete: return "Delete";
                case KeyAction.CreateFolder: return "Create Folder";
                case KeyAction.Properties: return "Properties";
                case KeyAction.Refresh: return "Refresh";
                case KeyAction.GoParent: return "Go to Parent";
                case KeyAction.GoBack: return "Go Back";
                case KeyAction.GoForward: return "Go Forward";
                case KeyAction.Exit: return "Exit";
                case KeyAction.Rename: return "Rename";
                case KeyAction.UserExecute: return "User Execute Option";
                default: return action.ToString();
            }
        }

        private KeyAction GetActionFromDisplayText(string displayText)
        {
            if (displayText == "None") return KeyAction.None;
            if (displayText == "View File") return KeyAction.View;
            if (displayText == "Edit File") return KeyAction.Edit;
            if (displayText == "Copy") return KeyAction.Copy;
            if (displayText == "Cut") return KeyAction.Cut;
            if (displayText == "Paste") return KeyAction.Paste;
            if (displayText == "Delete") return KeyAction.Delete;
            if (displayText == "Create Folder") return KeyAction.CreateFolder;
            if (displayText == "Properties") return KeyAction.Properties;
            if (displayText == "Refresh") return KeyAction.Refresh;
            if (displayText == "Go to Parent") return KeyAction.GoParent;
            if (displayText == "Go Back") return KeyAction.GoBack;
            if (displayText == "Go Forward") return KeyAction.GoForward;
            if (displayText == "Exit") return KeyAction.Exit;
            if (displayText == "Rename") return KeyAction.Rename;
            if (displayText == "User Execute Option") return KeyAction.UserExecute;

            // Default
            return KeyAction.None;
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            // Display confirmation message to user
            if (MessageBox.Show(
                StringResources.GetString("SaveKeySettingsConfirmation"), 
                StringResources.GetString("SaveKeySettings"), 
                MessageBoxButtons.YesNo, 
                MessageBoxIcon.Question) != DialogResult.Yes)
            {
                return; // User canceled the save
            }

            // Apply selected settings from comboboxes to keySettings object
            keySettings.Settings.Clear();

            foreach (var keyPair in keyComboBoxes)
            {
                Keys key = keyPair.Key;
                ComboBox comboBox = keyPair.Value;
                string selectedText = comboBox.SelectedItem?.ToString() ?? "None";
                KeyAction action = GetActionFromDisplayText(selectedText);

                // Additional settings for user execute option
                string userExecuteOptionName = "";
                if (action == KeyAction.UserExecute && userExecuteOptionComboBoxes.TryGetValue(key, out ComboBox cboUserOption))
                {
                    userExecuteOptionName = cboUserOption.SelectedItem?.ToString() ?? "";
                }

                // Debug F5 key setting
                if (key == Keys.F5)
                {
                    string debugMsg = StringResources.GetString("F5KeySettingBeforeSave", action);
                    Logger.Debug(debugMsg);
                }

                // Add setting
                keySettings.Settings.Add(new KeySetting(key, action, userExecuteOptionName));
            }

            // Save settings - check for possible errors
            try
            {
                keySettings.Save();
                
                // Check if settings file was created/updated properly
                string settingsPath = KeySettings.GetSettingsFilePath();
                if (File.Exists(settingsPath))
                {
                    // Read saved file again and check F5 key setting (fresh deserialize)
                    KeySettings loadedSettings = new KeySettings();
                    try
                    {
                        XmlSerializer serializer = new XmlSerializer(typeof(KeySettings));
                        using (StreamReader reader = new StreamReader(settingsPath))
                        {
                            loadedSettings = (KeySettings)serializer.Deserialize(reader);
                        }
                        
                        KeyAction loadedF5Action = KeyAction.None;
                        string loadedF5Option = "";
                        
                        foreach (var setting in loadedSettings.Settings)
                        {
                            if (setting.Key == Keys.F5)
                            {
                                loadedF5Action = setting.Action;
                                loadedF5Option = setting.UserExecuteOptionName;
                                break;
                            }
                        }
                        
                        string verifyMsg = StringResources.GetString("F5KeySettingVerification", loadedF5Action);
                        Logger.Debug(verifyMsg);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(
                            StringResources.GetString("SavedSettingsVerificationError", ex.Message),
                            StringResources.GetString("SettingsVerificationError"), 
                            MessageBoxButtons.OK, 
                            MessageBoxIcon.Error);
                    }
                }
                else
                {
                    Logger.Error($"Settings file was not saved: {settingsPath}");
                    MessageBox.Show(
                        StringResources.GetString("ErrorSavingSettings", settingsPath), 
                        StringResources.GetString("SettingsSaveError"), 
                        MessageBoxButtons.OK, 
                        MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex, "Error saving settings");
                MessageBox.Show(
                    StringResources.GetString("ErrorSavingSettings", ex.Message), 
                    StringResources.GetString("SettingsSaveError"), 
                    MessageBoxButtons.OK, 
                    MessageBoxIcon.Error);
            }
            
            // Apply changes immediately to the main form by finding the appropriate field
            Form mainForm = this.Owner;
            if (mainForm != null && mainForm is Form_TotalCommander)
            {
                // Use reflection to access keySettings field
                try
                {
                    System.Reflection.FieldInfo fieldInfo = mainForm.GetType().GetField("keySettings", 
                        System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                    
                    if (fieldInfo != null)
                    {
                        // Set field value directly - don't reload, use current settings object
                        fieldInfo.SetValue(mainForm, keySettings);
                        
                        // Confirmation log
                        Logger.Information("Key settings saved and applied to main form");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ex, "Error applying settings to main form");
                }
            }
            
            DialogResult = DialogResult.OK;
        }

        private void btnDefault_Click(object sender, EventArgs e)
        {
            // Reset to default settings
            keySettings.SetDefaults();

            // Update UI
            foreach (var keyPair in keyComboBoxes)
            {
                Keys key = keyPair.Key;
                ComboBox comboBox = keyPair.Value;
                KeyAction action = keySettings.GetActionForKey(key);
                comboBox.SelectedItem = GetActionDisplayText(action);

                // Disable user execute option comboboxes
                if (userExecuteOptionComboBoxes.TryGetValue(key, out ComboBox cboUserOption))
                {
                    cboUserOption.Enabled = false;
                    cboUserOption.SelectedIndex = -1;
                }
            }
        }

        private void btnManageUserOptions_Click(object sender, EventArgs e)
        {
            // Show user execute options management dialog
            using (FormManageUserOptions form = new FormManageUserOptions(keySettings))
            {
                if (form.ShowDialog(this) == DialogResult.OK)
                {
                    // Options list has changed, update comboboxes
                    foreach (var keyPair in userExecuteOptionComboBoxes)
                    {
                        ComboBox comboBox = keyPair.Value;
                        string selectedOption = comboBox.SelectedItem?.ToString() ?? "";
                        
                        PopulateUserExecuteOptionComboBox(comboBox);
                        
                        // Re-select previously selected option if it still exists
                        if (!string.IsNullOrEmpty(selectedOption) && comboBox.Items.Contains(selectedOption))
                        {
                            comboBox.SelectedItem = selectedOption;
                        }
                        else if (comboBox.Enabled && comboBox.Items.Count > 0)
                        {
                            comboBox.SelectedIndex = 0;
                        }
                    }
                }
            }
        }
    }
} 
